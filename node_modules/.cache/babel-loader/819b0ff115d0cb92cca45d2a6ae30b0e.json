{"ast":null,"code":"var _jsxFileName = \"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Paper, CardHeader, CardContent, TextField, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookAppointment = _ref => {\n  _s();\n\n  let {\n    doctor,\n    getUserAppointments,\n    userAppointments,\n    closeModalHandler\n  } = _ref;\n  const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = date => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`; // console.log(newDate);\n\n    return newDate;\n  };\n\n  const currentUserAppointments = userAppointments;\n  const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n  const [selectSlot, setSelectSlot] = useState(\"\");\n  const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n  const [slotRequired, setSlotRequired] = useState(\"None\");\n\n  const dateChangeHandler = date => {\n    setSelectDate(dateFormatter(date));\n  };\n\n  const slotChangeHandler = event => {\n    setSelectSlot(event.target.value); //insert here\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors${doctor.id}timeSlot?date=?${selectDate}`;\n\n    try {\n      const rawResponse = await fetch(url);\n\n      if (rawResponse.ok) {\n        const response = rawResponse.json();\n        setSlotsAvailable(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some error Occured in fetching timeslots\";\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const bookAppointmentHandler = async e => {\n    if (e) e.preventDefault();\n\n    if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n      setSlotRequired(\"Block\");\n      return;\n    }\n\n    const accessToken = sessionStorage.getItem(\"access-token\");\n    const userDetails = sessionStorage.getItem(\"user-info\"); // const email = userDetails.id;\n\n    if (accessToken === null || userDetails === null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    } // Check if user already has appointment for the same date-time\n\n\n    const existingAppointment = currentUserAppointments.filter(appointment => {\n      if (appointment.appointmentDate === selectDate && appointment.timeSlot === selectSlot) {\n        return appointment;\n      }\n\n      return null;\n    });\n\n    if (existingAppointment.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    const data = {\n      doctorId: doctor.id,\n      doctorName: doctorName\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"6xKm+4tRpipuSAviWc09WlyU8Mk=\");\n\n_c = BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","useState","useEffect","Paper","CardHeader","CardContent","TextField","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","BookAppointment","doctor","getUserAppointments","userAppointments","closeModalHandler","doctorName","firstName","lastName","dateFormatter","date","dateArray","toLocaleDateString","split","newDate","currentUserAppointments","selectDate","setSelectDate","Date","selectSlot","setSelectSlot","slotsAvailable","setSlotsAvailable","medicalHistory","setMedicalHistory","symptoms","setSymptoms","bookedSuccessfully","setBookedSuccessfully","slotRequired","setSlotRequired","dateChangeHandler","slotChangeHandler","event","target","value","getAvailableSlots","url","id","rawResponse","fetch","ok","response","json","timeSlot","error","Error","message","alert","bookAppointmentHandler","e","preventDefault","accessToken","sessionStorage","getItem","userDetails","existingAppointment","filter","appointment","appointmentDate","length","data","doctorId"],"sources":["/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Paper,\n  CardHeader,\n  CardContent,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nconst BookAppointment = ({\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler,\n}) => {\n  const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = (date) => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n    // console.log(newDate);\n    return newDate;\n  };\n\n  const currentUserAppointments = userAppointments;\n  const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n  const [selectSlot, setSelectSlot] = useState(\"\");\n  const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n  const [slotRequired, setSlotRequired] = useState(\"None\");\n\n  const dateChangeHandler = (date) => {\n    setSelectDate(dateFormatter(date));\n  };\n\n  const slotChangeHandler = (event) => {\n    setSelectSlot(event.target.value);\n    //insert here\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors${doctor.id}timeSlot?date=?${selectDate}`;\n    try {\n      const rawResponse = await fetch(url);\n      if (rawResponse.ok) {\n        const response = rawResponse.json();\n        setSlotsAvailable(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some error Occured in fetching timeslots\";\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const bookAppointmentHandler = async (e) => {\n    if (e) e.preventDefault();\n\n    if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n      setSlotRequired(\"Block\");\n      return;\n    }\n\n    const accessToken = sessionStorage.getItem(\"access-token\");\n    const userDetails = sessionStorage.getItem(\"user-info\");\n    // const email = userDetails.id;\n\n    if (accessToken === null || userDetails === null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    }\n\n    // Check if user already has appointment for the same date-time\n    const existingAppointment = currentUserAppointments.filter(\n      (appointment) => {\n        if (\n          appointment.appointmentDate === selectDate &&\n          appointment.timeSlot === selectSlot\n        ) {\n          return appointment;\n        }\n        return null;\n      }\n    );\n    if (existingAppointment.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    const data = {\n      doctorId: doctor.id,\n      doctorName: doctorName,\n    };\n  };\n\n  return (\n    <div>\n      <div></div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}