{"ast":null,"code":"import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","map":{"version":3,"names":["toInteger","toDate","requiredArgs","setUTCDay","dirtyDate","dirtyDay","dirtyOptions","arguments","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","currentDay","getUTCDay","remainder","dayIndex","diff","setUTCDate","getUTCDate"],"sources":["/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/node_modules/date-fns/esm/_lib/setUTCDay/index.js"],"sourcesContent":["import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,0BAAzB,C,CAAqD;AACrD;;AAEA,eAAe,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,YAAxC,EAAsD;EACnEJ,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;EACA,IAAIC,OAAO,GAAGF,YAAY,IAAI,EAA9B;EACA,IAAIG,MAAM,GAAGD,OAAO,CAACC,MAArB;EACA,IAAIC,kBAAkB,GAAGD,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAeG,YAApE;EACA,IAAIC,mBAAmB,GAAGF,kBAAkB,IAAI,IAAtB,GAA6B,CAA7B,GAAiCV,SAAS,CAACU,kBAAD,CAApE;EACA,IAAIC,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,IAAxB,GAA+BC,mBAA/B,GAAqDZ,SAAS,CAACQ,OAAO,CAACG,YAAT,CAAjF,CANmE,CAMsC;;EAEzG,IAAI,EAAEA,YAAY,IAAI,CAAhB,IAAqBA,YAAY,IAAI,CAAvC,CAAJ,EAA+C;IAC7C,MAAM,IAAIE,UAAJ,CAAe,kDAAf,CAAN;EACD;;EAED,IAAIC,IAAI,GAAGb,MAAM,CAACG,SAAD,CAAjB;EACA,IAAIW,GAAG,GAAGf,SAAS,CAACK,QAAD,CAAnB;EACA,IAAIW,UAAU,GAAGF,IAAI,CAACG,SAAL,EAAjB;EACA,IAAIC,SAAS,GAAGH,GAAG,GAAG,CAAtB;EACA,IAAII,QAAQ,GAAG,CAACD,SAAS,GAAG,CAAb,IAAkB,CAAjC;EACA,IAAIE,IAAI,GAAG,CAACD,QAAQ,GAAGR,YAAX,GAA0B,CAA1B,GAA8B,CAA/B,IAAoCI,GAApC,GAA0CC,UAArD;EACAF,IAAI,CAACO,UAAL,CAAgBP,IAAI,CAACQ,UAAL,KAAoBF,IAApC;EACA,OAAON,IAAP;AACD"},"metadata":{},"sourceType":"module"}