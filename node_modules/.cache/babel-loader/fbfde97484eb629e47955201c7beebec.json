{"ast":null,"code":"var _jsxFileName = \"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   Paper,\n//   CardHeader,\n//   CardContent,\n//   TextField,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Button,\n//   FormHelperText,\n// } from \"@material-ui/core\";\n// import \"date-fns\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// // import { Book } from \"@material-ui/icons\";\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n//   const dateFormatter = (date) => {\n//     let dateArray = date.toLocaleDateString().split(\"/\");\n//     let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n//     // console.log(newDate);\n//     return newDate;\n//   };\n//   const currentUserAppointments = userAppointments;\n//   const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n//   const [selectSlot, setSelectSlot] = useState(\"\");\n//   const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n//   const [medicalHistory, setMedicalHistory] = useState(\"\");\n//   const [symptoms, setSymptoms] = useState(\"\");\n//   const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n//   const [slotRequired, setSlotRequired] = useState(\"None\");\n//   const dateChangeHandler = (date) => {\n//     setSelectDate(dateFormatter(date));\n//   };\n//   const slotChangeHandler = (event) => {\n//     setSelectSlot(event.target.value);\n//     //insert here\n//     slotRequired(\"None\");\n//   };\n//   const getAvailableSlots = async () => {\n//     const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n//     try {\n//       const rawResponse = await fetch(url);\n//       if (rawResponse.ok) {\n//         const response = await rawResponse.json();\n//         setSlotsAvailable(response.timeSlot);\n//       } else {\n//         const error = new Error();\n//         error.message = \"Some error occured in fetching timeslots\";\n//         throw error;\n//       }\n//     } catch (error) {\n//       alert(error.message);\n//     }\n//   };\n//   const bookAppointmentHandler = async (e) => {\n//     if (e) e.preventDefault();\n//     if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n//       setSlotRequired(\"Block\");\n//       return;\n//     }\n//     const accessToken = sessionStorage.getItem(\"access-token\");\n//     const userDetails = sessionStorage.getItem(\"user-info\");\n//     // const emailId = sessionStorage.getItem(\"user-id\");\n//     // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n//     // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n//     if (accessToken === null || userDetails === null) {\n//       alert(\"Please Login to Book an appointment\");\n//       closeModalHandler();\n//       return;\n//     }\n//     // Check if user already has appointment for the same date-time\n//     const existingAppointment = currentUserAppointments.filter(\n//       (appointment) => {\n//         if (\n//           appointment.appointmentDate === selectDate &&\n//           appointment.timeSlot === selectSlot\n//         ) {\n//           return appointment;\n//         }\n//         return null;\n//       }\n//     );\n//     if (existingAppointment.length > 0) {\n//       alert(\"Either the slot is already booked or not available\");\n//       return;\n//     }\n//     const data = {\n//       doctorId: doctor.id,\n//       doctorName: doctorName,\n//       userId: userDetails.id,\n//       userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//       timeSlot: selectSlot,\n//       createdDate: dateFormatter(new Date()),\n//       appointmentDate: selectDate,\n//       symptoms: symptoms,\n//       priorMedicalHistory: medicalHistory,\n//     };\n//     const url = \"http://localhost:8080/appointments\";\n//     const appointmentRequest = {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json;charset=UTF-8\",\n//         Authorization: `Bearer ${accessToken}`,\n//       },\n//       body: JSON.stringify(data),\n//     };\n//     try {\n//       const rawResponse = await fetch(url, appointmentRequest);\n//       if (rawResponse.ok) {\n//         setBookedSuccessfully(true);\n//         getUserAppointments();\n//         setTimeout(function () {\n//           closeModalHandler();\n//         }, 1000);\n//       } else {\n//         if (rawResponse.status === 400) {\n//           alert(\"Bad Request\");\n//         }\n//       }\n//     } catch (error) {\n//       alert(e.message);\n//     }\n//   };\n//   useEffect(() => {\n//     getAvailableSlots();\n//   }, [selectDate]);\n//   return (\n//     <div>\n//       <Paper className=\"bookingModal\">\n//         <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n//         <CardContent key={doctor.id}>\n//           <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n//             <div>\n//               <TextField\n//                 disabled\n//                 id=\"standard-disabled\"\n//                 label=\"DoctorName\"\n//                 required\n//                 value={doctorName}\n//               />\n//             </div>\n//             <div>\n//               <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                 <KeyboardDatePicker\n//                   disableToolbar\n//                   variant=\"inline\"\n//                   format=\"MM/dd/yyyy\"\n//                   margin=\"normal\"\n//                   id=\"date-picker-inline\"\n//                   label=\"Date picker inline\"\n//                   value={selectDate}\n//                   onChange={dateChangeHandler}\n//                   KeyboardButtonProps={{\n//                     \"aria-label\": \"change date\",\n//                   }}\n//                 />\n//               </MuiPickersUtilsProvider>\n//             </div>\n//             <div>\n//               <FormControl>\n//                 <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n//                 <Select\n//                   labelId=\"timeSlotInput\"\n//                   id=\"timeSlotInput\"\n//                   value={selectSlot}\n//                   onChange={slotChangeHandler}\n//                 >\n//                   <MenuItem value=\"None\">\n//                     <em>None</em>\n//                   </MenuItem>\n//                   {/* For Testing of Duplicate date-time booking */}\n//                   {/* <MenuItem value=\"05PM-06PM\">\n//                     <em>05PM-06PM</em>\n//                   </MenuItem> */}\n//                   {slotsAvailable.map((slot, key) => (\n//                     <MenuItem key={key} value={slot}>\n//                       {slot}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//                 <FormHelperText className={slotRequired}>\n//                   <span className=\"red\">Select a time slot</span>\n//                 </FormHelperText>\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Medical History\"\n//                   multiline\n//                   rows={4}\n//                   value={medicalHistory}\n//                   onChange={(e) => setMedicalHistory(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Symptoms\"\n//                   multiline\n//                   rows={4}\n//                   value={symptoms}\n//                   placeholder=\"ex.Cold, Swelling, etc\"\n//                   onChange={(e) => setSymptoms(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             {bookedSuccessfully === true && (\n//               <FormControl>\n//                 <span>Appointment booked successfully.</span>\n//               </FormControl>\n//             )}\n//             <br />\n//             <br />\n//             <Button\n//               id=\"bookappointment\"\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//             >\n//               Book Appointment\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Paper>{\" \"}\n//     </div>\n//   );\n// };\n// export default BookAppointment;\nimport React, { useState, useEffect } from \"react\";\nimport { Paper, CardHeader, CardContent, TextField, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookAppointment = _ref => {\n  _s();\n\n  let {\n    doctor,\n    getUserAppointments,\n    userAppointments,\n    closeModalHandler\n  } = _ref;\n  let doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = date => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n    console.log(newDate);\n    return newDate;\n  };\n\n  const currentUserAppoinments = userAppointments;\n  const [selectedDate, setSelectedDate] = useState(dateFormatter(new Date()));\n  const [selectedSlot, setSelectedSlot] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [slotRequiredClass, setSlotRequiredClass] = useState(\"none\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n\n  const handleDateChange = date => {\n    setSelectedDate(dateFormatter(date));\n  };\n\n  const handleSlotChange = e => {\n    setSelectedSlot(e.target.value);\n    setSlotRequiredClass(\"none\");\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectedDate}`; // console.log(url);\n\n    try {\n      const rawResponse = await fetch(url);\n\n      if (rawResponse.ok) {\n        const response = await rawResponse.json(); // console.log(response);\n\n        setAvailableSlots(response.timeSlot); // console.log(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some Error Occurred\";\n        throw error;\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const bookAppointmentHandler = async e => {\n    // console.log(e.currentTarget);\n    if (e) e.preventDefault(); // Validation\n\n    if (selectedSlot === \"None\" || selectedSlot === null || selectedSlot === \"\") {\n      setSlotRequiredClass(\"block\");\n      return;\n    } // console.log(\"Book Appointment Handler called\");\n\n\n    const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    const userDetails = JSON.parse(sessionStorage.getItem(\"user-details\"));\n    const accessToken = sessionStorage.getItem(\"accessToken\"); // console.log(JSON.parse(emailId));\n    // console.log(accessToken, emailId, userDetails);\n    // Allow only logged in user to Book appointment\n\n    if (emailId == null || userDetails == null || accessToken == null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    } // Check if user already has appointment for the same date-time\n\n\n    const existingBooking = currentUserAppoinments.filter(appt => {\n      if (appt.appointmentDate === selectedDate && appt.timeSlot === selectedSlot) {\n        return appt;\n      }\n\n      return null;\n    }); // console.log(existingBooking.length);\n\n    if (existingBooking.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    let data = {\n      doctorId: doctor.id,\n      doctorName: doctorName,\n      userId: emailId,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      timeSlot: selectedSlot,\n      createdDate: dateFormatter(new Date()),\n      appointmentDate: selectedDate,\n      symptoms: symptoms,\n      priorMedicalHistory: medicalHistory\n    }; // console.log(data);\n\n    const url = \"http://localhost:8080/appointments\";\n\n    try {\n      // debugger;\n      const rawResponse = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\",\n          Authorization: `Bearer ${accessToken}`\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000); // console.log(\"Appointment booked successfully\");\n        // alert(\"Appointment booked successfully\");\n      }\n\n      if (rawResponse.status === 400) {\n        alert(\"Bad Request\");\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  }; // useEffect(() => {\n  //   setSelectedDate(dateFormatter(new Date()));\n  // }, []);\n\n\n  useEffect(() => {\n    getAvailableSlots(); // console.log(currentUserAppoinments);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"bookingModal\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        className: \"cardHeader\",\n        title: \"Book an Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: bookAppointmentHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              id: \"standard-disabled\",\n              label: \"DoctorName\",\n              required: true,\n              value: doctorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n              utils: DateFnsUtils,\n              children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                disableToolbar: true,\n                variant: \"inline\",\n                format: \"MM/dd/yyyy\",\n                margin: \"normal\",\n                id: \"date-picker-inline\",\n                label: \"Date picker inline\",\n                value: selectedDate,\n                onChange: handleDateChange,\n                KeyboardButtonProps: {\n                  \"aria-label\": \"change date\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"timeSlotInput\",\n                children: \"Time Slot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"timeSlotInput\",\n                id: \"timeSlotInput\",\n                value: selectedSlot,\n                onChange: handleSlotChange,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"None\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 478,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 19\n                }, this), availableSlots.map((slot, key) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: slot,\n                  children: slot\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: slotRequiredClass,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Select a time slot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Medical History\",\n                multiline: true,\n                rows: 4,\n                value: medicalHistory,\n                onChange: e => setMedicalHistory(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Symptoms\",\n                multiline: true,\n                rows: 4,\n                value: symptoms,\n                placeholder: \"ex.Cold, Swelling, etc\",\n                onChange: e => setSymptoms(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), bookedSuccessfully === true && /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Appointment booked successfully.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"bookappointment\",\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"P9xCqBvVZbwwaL1Sr5NtTynsvo8=\");\n\n_c = BookAppointment;\nexport default BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","useState","useEffect","Paper","CardHeader","CardContent","TextField","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","BookAppointment","doctor","getUserAppointments","userAppointments","closeModalHandler","doctorName","firstName","lastName","dateFormatter","date","dateArray","toLocaleDateString","split","newDate","console","log","currentUserAppoinments","selectedDate","setSelectedDate","Date","selectedSlot","setSelectedSlot","availableSlots","setAvailableSlots","medicalHistory","setMedicalHistory","symptoms","setSymptoms","slotRequiredClass","setSlotRequiredClass","bookedSuccessfully","setBookedSuccessfully","handleDateChange","handleSlotChange","e","target","value","getAvailableSlots","url","id","rawResponse","fetch","ok","response","json","timeSlot","error","Error","message","alert","bookAppointmentHandler","preventDefault","emailId","JSON","parse","sessionStorage","getItem","userDetails","accessToken","existingBooking","filter","appt","appointmentDate","length","data","doctorId","userId","userName","createdDate","priorMedicalHistory","method","headers","Accept","Authorization","body","stringify","setTimeout","status","map","slot","key"],"sources":["/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import {\n//   Paper,\n//   CardHeader,\n//   CardContent,\n//   TextField,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Button,\n//   FormHelperText,\n// } from \"@material-ui/core\";\n// import \"date-fns\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// // import { Book } from \"@material-ui/icons\";\n\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n//   const dateFormatter = (date) => {\n//     let dateArray = date.toLocaleDateString().split(\"/\");\n//     let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n//     // console.log(newDate);\n//     return newDate;\n//   };\n\n//   const currentUserAppointments = userAppointments;\n//   const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n//   const [selectSlot, setSelectSlot] = useState(\"\");\n//   const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n//   const [medicalHistory, setMedicalHistory] = useState(\"\");\n//   const [symptoms, setSymptoms] = useState(\"\");\n//   const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n//   const [slotRequired, setSlotRequired] = useState(\"None\");\n\n//   const dateChangeHandler = (date) => {\n//     setSelectDate(dateFormatter(date));\n//   };\n\n//   const slotChangeHandler = (event) => {\n//     setSelectSlot(event.target.value);\n//     //insert here\n//     slotRequired(\"None\");\n//   };\n\n//   const getAvailableSlots = async () => {\n//     const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n//     try {\n//       const rawResponse = await fetch(url);\n//       if (rawResponse.ok) {\n//         const response = await rawResponse.json();\n//         setSlotsAvailable(response.timeSlot);\n//       } else {\n//         const error = new Error();\n//         error.message = \"Some error occured in fetching timeslots\";\n//         throw error;\n//       }\n//     } catch (error) {\n//       alert(error.message);\n//     }\n//   };\n\n//   const bookAppointmentHandler = async (e) => {\n//     if (e) e.preventDefault();\n\n//     if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n//       setSlotRequired(\"Block\");\n//       return;\n//     }\n\n//     const accessToken = sessionStorage.getItem(\"access-token\");\n//     const userDetails = sessionStorage.getItem(\"user-info\");\n//     // const emailId = sessionStorage.getItem(\"user-id\");\n//     // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n//     // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n\n//     if (accessToken === null || userDetails === null) {\n//       alert(\"Please Login to Book an appointment\");\n//       closeModalHandler();\n//       return;\n//     }\n\n//     // Check if user already has appointment for the same date-time\n//     const existingAppointment = currentUserAppointments.filter(\n//       (appointment) => {\n//         if (\n//           appointment.appointmentDate === selectDate &&\n//           appointment.timeSlot === selectSlot\n//         ) {\n//           return appointment;\n//         }\n//         return null;\n//       }\n//     );\n//     if (existingAppointment.length > 0) {\n//       alert(\"Either the slot is already booked or not available\");\n//       return;\n//     }\n\n//     const data = {\n//       doctorId: doctor.id,\n//       doctorName: doctorName,\n//       userId: userDetails.id,\n//       userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//       timeSlot: selectSlot,\n//       createdDate: dateFormatter(new Date()),\n//       appointmentDate: selectDate,\n//       symptoms: symptoms,\n//       priorMedicalHistory: medicalHistory,\n//     };\n\n//     const url = \"http://localhost:8080/appointments\";\n//     const appointmentRequest = {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json;charset=UTF-8\",\n//         Authorization: `Bearer ${accessToken}`,\n//       },\n//       body: JSON.stringify(data),\n//     };\n\n//     try {\n//       const rawResponse = await fetch(url, appointmentRequest);\n//       if (rawResponse.ok) {\n//         setBookedSuccessfully(true);\n//         getUserAppointments();\n//         setTimeout(function () {\n//           closeModalHandler();\n//         }, 1000);\n//       } else {\n//         if (rawResponse.status === 400) {\n//           alert(\"Bad Request\");\n//         }\n//       }\n//     } catch (error) {\n//       alert(e.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     getAvailableSlots();\n//   }, [selectDate]);\n\n//   return (\n//     <div>\n//       <Paper className=\"bookingModal\">\n//         <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n//         <CardContent key={doctor.id}>\n//           <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n//             <div>\n//               <TextField\n//                 disabled\n//                 id=\"standard-disabled\"\n//                 label=\"DoctorName\"\n//                 required\n//                 value={doctorName}\n//               />\n//             </div>\n//             <div>\n//               <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                 <KeyboardDatePicker\n//                   disableToolbar\n//                   variant=\"inline\"\n//                   format=\"MM/dd/yyyy\"\n//                   margin=\"normal\"\n//                   id=\"date-picker-inline\"\n//                   label=\"Date picker inline\"\n//                   value={selectDate}\n//                   onChange={dateChangeHandler}\n//                   KeyboardButtonProps={{\n//                     \"aria-label\": \"change date\",\n//                   }}\n//                 />\n//               </MuiPickersUtilsProvider>\n//             </div>\n//             <div>\n//               <FormControl>\n//                 <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n//                 <Select\n//                   labelId=\"timeSlotInput\"\n//                   id=\"timeSlotInput\"\n//                   value={selectSlot}\n//                   onChange={slotChangeHandler}\n//                 >\n//                   <MenuItem value=\"None\">\n//                     <em>None</em>\n//                   </MenuItem>\n//                   {/* For Testing of Duplicate date-time booking */}\n//                   {/* <MenuItem value=\"05PM-06PM\">\n//                     <em>05PM-06PM</em>\n//                   </MenuItem> */}\n//                   {slotsAvailable.map((slot, key) => (\n//                     <MenuItem key={key} value={slot}>\n//                       {slot}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//                 <FormHelperText className={slotRequired}>\n//                   <span className=\"red\">Select a time slot</span>\n//                 </FormHelperText>\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Medical History\"\n//                   multiline\n//                   rows={4}\n//                   value={medicalHistory}\n//                   onChange={(e) => setMedicalHistory(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Symptoms\"\n//                   multiline\n//                   rows={4}\n//                   value={symptoms}\n//                   placeholder=\"ex.Cold, Swelling, etc\"\n//                   onChange={(e) => setSymptoms(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             {bookedSuccessfully === true && (\n//               <FormControl>\n//                 <span>Appointment booked successfully.</span>\n//               </FormControl>\n//             )}\n//             <br />\n//             <br />\n//             <Button\n//               id=\"bookappointment\"\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//             >\n//               Book Appointment\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Paper>{\" \"}\n//     </div>\n//   );\n// };\n\n// export default BookAppointment;\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Paper,\n  CardHeader,\n  CardContent,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nconst BookAppointment = ({\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler,\n}) => {\n  let doctorName = `${doctor.firstName} ${doctor.lastName}`;\n  const dateFormatter = (date) => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n    console.log(newDate);\n    return newDate;\n  };\n  const currentUserAppoinments = userAppointments;\n  const [selectedDate, setSelectedDate] = useState(dateFormatter(new Date()));\n  const [selectedSlot, setSelectedSlot] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [slotRequiredClass, setSlotRequiredClass] = useState(\"none\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n\n  const handleDateChange = (date) => {\n    setSelectedDate(dateFormatter(date));\n  };\n\n  const handleSlotChange = (e) => {\n    setSelectedSlot(e.target.value);\n    setSlotRequiredClass(\"none\");\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectedDate}`;\n    // console.log(url);\n\n    try {\n      const rawResponse = await fetch(url);\n\n      if (rawResponse.ok) {\n        const response = await rawResponse.json();\n        // console.log(response);\n        setAvailableSlots(response.timeSlot);\n        // console.log(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some Error Occurred\";\n        throw error;\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const bookAppointmentHandler = async (e) => {\n    // console.log(e.currentTarget);\n    if (e) e.preventDefault();\n\n    // Validation\n    if (\n      selectedSlot === \"None\" ||\n      selectedSlot === null ||\n      selectedSlot === \"\"\n    ) {\n      setSlotRequiredClass(\"block\");\n      return;\n    }\n    // console.log(\"Book Appointment Handler called\");\n    const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    const userDetails = JSON.parse(sessionStorage.getItem(\"user-details\"));\n    const accessToken = sessionStorage.getItem(\"accessToken\");\n    // console.log(JSON.parse(emailId));\n    // console.log(accessToken, emailId, userDetails);\n\n    // Allow only logged in user to Book appointment\n    if (emailId == null || userDetails == null || accessToken == null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    }\n\n    // Check if user already has appointment for the same date-time\n    const existingBooking = currentUserAppoinments.filter((appt) => {\n      if (\n        appt.appointmentDate === selectedDate &&\n        appt.timeSlot === selectedSlot\n      ) {\n        return appt;\n      }\n      return null;\n    });\n\n    // console.log(existingBooking.length);\n    if (existingBooking.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    let data = {\n      doctorId: doctor.id,\n      doctorName: doctorName,\n      userId: emailId,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      timeSlot: selectedSlot,\n      createdDate: dateFormatter(new Date()),\n      appointmentDate: selectedDate,\n      symptoms: symptoms,\n      priorMedicalHistory: medicalHistory,\n    };\n\n    // console.log(data);\n\n    const url = \"http://localhost:8080/appointments\";\n    try {\n      // debugger;\n      const rawResponse = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\",\n          Authorization: `Bearer ${accessToken}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000);\n        // console.log(\"Appointment booked successfully\");\n        // alert(\"Appointment booked successfully\");\n      }\n      if (rawResponse.status === 400) {\n        alert(\"Bad Request\");\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   setSelectedDate(dateFormatter(new Date()));\n  // }, []);\n\n  useEffect(() => {\n    getAvailableSlots();\n    // console.log(currentUserAppoinments);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedDate]);\n\n  return (\n    <div>\n      <Paper className=\"bookingModal\">\n        <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n        <CardContent key={doctor.id}>\n          <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n            <div>\n              <TextField\n                disabled\n                id=\"standard-disabled\"\n                label=\"DoctorName\"\n                required\n                value={doctorName}\n              />\n            </div>\n            <div>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"date-picker-inline\"\n                  label=\"Date picker inline\"\n                  value={selectedDate}\n                  onChange={handleDateChange}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div>\n              <FormControl>\n                <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n                <Select\n                  labelId=\"timeSlotInput\"\n                  id=\"timeSlotInput\"\n                  value={selectedSlot}\n                  onChange={handleSlotChange}\n                >\n                  <MenuItem value=\"None\">\n                    <em>None</em>\n                  </MenuItem>\n                  {/* For Testing of Duplicate date-time booking */}\n                  {/* <MenuItem value=\"05PM-06PM\">\n                    <em>05PM-06PM</em>\n                  </MenuItem> */}\n                  {availableSlots.map((slot, key) => (\n                    <MenuItem key={key} value={slot}>\n                      {slot}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText className={slotRequiredClass}>\n                  <span className=\"red\">Select a time slot</span>\n                </FormHelperText>\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Medical History\"\n                  multiline\n                  rows={4}\n                  value={medicalHistory}\n                  onChange={(e) => setMedicalHistory(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Symptoms\"\n                  multiline\n                  rows={4}\n                  value={symptoms}\n                  placeholder=\"ex.Cold, Swelling, etc\"\n                  onChange={(e) => setSymptoms(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            {bookedSuccessfully === true && (\n              <FormControl>\n                <span>Appointment booked successfully.</span>\n              </FormControl>\n            )}\n            <br />\n            <br />\n            <Button\n              id=\"bookappointment\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Book Appointment\n            </Button>\n          </form>\n        </CardContent>\n      </Paper>\n    </div>\n  );\n};\n\nexport default BookAppointment;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module"}