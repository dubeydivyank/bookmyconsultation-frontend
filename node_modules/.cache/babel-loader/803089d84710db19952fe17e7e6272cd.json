{"ast":null,"code":"var _jsxFileName = \"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   Paper,\n//   CardHeader,\n//   CardContent,\n//   TextField,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Button,\n//   FormHelperText,\n// } from \"@material-ui/core\";\n// import \"date-fns\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// // import { Book } from \"@material-ui/icons\";\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n//   const dateFormatter = (date) => {\n//     let dateArray = date.toLocaleDateString().split(\"/\");\n//     let newDate = `${dateArray[2]}-${dateArray[1]}-${dateArray[0]}`;\n//     console.log(newDate);\n//     return newDate;\n//   };\n//   const currentUserAppointments = userAppointments;\n//   const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n//   const [selectSlot, setSelectSlot] = useState(\"\");\n//   const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n//   const [medicalHistory, setMedicalHistory] = useState(\"\");\n//   const [symptoms, setSymptoms] = useState(\"\");\n//   const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n//   const [slotRequired, setSlotRequired] = useState(true);\n//   const dateChangeHandler = (date) => {\n//     setSelectDate(dateFormatter(date));\n//   };\n//   const slotChangeHandler = (event) => {\n//     setSelectSlot(event.target.value);\n//     //insert here\n//     setSlotRequired(false);\n//   };\n//   const getAvailableSlots = async () => {\n//     const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n//     try {\n//       const rawResponse = await fetch(url);\n//       if (rawResponse.ok) {\n//         const response = await rawResponse.json();\n//         setSlotsAvailable(response.timeSlot);\n//       } else {\n//         const error = new Error();\n//         error.message = \"Some error occured in fetching timeslots\";\n//         throw error;\n//       }\n//     } catch (error) {\n//       alert(error.message);\n//     }\n//   };\n//   const bookAppointmentHandler = async (e) => {\n//     if (e) e.preventDefault();\n//     if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n//       setSlotRequired(true);\n//       return;\n//     }\n//     const accessToken = sessionStorage.getItem(\"access-token\");\n//     const userDetails = sessionStorage.getItem(\"user-info\");\n//     // const emailId = sessionStorage.getItem(\"user-id\");\n//     // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n//     // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n//     if (accessToken === null || userDetails === null) {\n//       alert(\"Please Login to Book an appointment\");\n//       closeModalHandler();\n//       return;\n//     }\n//     // Check if user already has appointment for the same date-time\n//     const existingAppointment = currentUserAppointments.filter(\n//       (appointment) => {\n//         if (\n//           appointment.appointmentDate === selectDate &&\n//           appointment.timeSlot === selectSlot\n//         ) {\n//           return appointment;\n//         }\n//         return null;\n//       }\n//     );\n//     if (existingAppointment.length > 0) {\n//       alert(\"Either the slot is already booked or not available\");\n//       return;\n//     }\n//     const data = {\n//       doctorId: doctor.id,\n//       doctorName: doctorName,\n//       userId: userDetails.id,\n//       userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//       timeSlot: selectSlot,\n//       createdDate: dateFormatter(new Date()),\n//       appointmentDate: selectDate,\n//       symptoms: symptoms,\n//       priorMedicalHistory: medicalHistory,\n//     };\n//     const url = \"http://localhost:8080/appointments\";\n//     const appointmentRequest = {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json;charset=UTF-8\",\n//         Authorization: `Bearer ${accessToken}`,\n//       },\n//       body: JSON.stringify(data),\n//     };\n//     try {\n//       const rawResponse = await fetch(url, appointmentRequest);\n//       if (rawResponse.ok) {\n//         setBookedSuccessfully(true);\n//         getUserAppointments();\n//         setTimeout(function () {\n//           closeModalHandler();\n//         }, 1000);\n//       } else {\n//         if (rawResponse.status === 400) {\n//           alert(\"Bad Request\");\n//         }\n//       }\n//     } catch (error) {\n//       alert(e.message);\n//     }\n//   };\n//   useEffect(() => {\n//     getAvailableSlots();\n//   }, [selectDate]);\n//   return (\n//     <div>\n//       <Paper className=\"bookingModal\">\n//         <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n//         <CardContent key={doctor.id}>\n//           <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n//             <div>\n//               <TextField\n//                 disabled\n//                 id=\"standard-disabled\"\n//                 label=\"DoctorName\"\n//                 required\n//                 value={doctorName}\n//               />\n//             </div>\n//             <div>\n//               <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                 <KeyboardDatePicker\n//                   disableToolbar\n//                   variant=\"inline\"\n//                   format=\"MM/dd/yyyy\"\n//                   margin=\"normal\"\n//                   id=\"date-picker-inline\"\n//                   label=\"Date picker inline\"\n//                   value={selectDate}\n//                   onChange={dateChangeHandler}\n//                   KeyboardButtonProps={{\n//                     \"aria-label\": \"change date\",\n//                   }}\n//                 />\n//               </MuiPickersUtilsProvider>\n//             </div>\n//             <div>\n//               <FormControl>\n//                 <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n//                 <Select\n//                   labelId=\"timeSlotInput\"\n//                   id=\"timeSlotInput\"\n//                   value={selectSlot}\n//                   onChange={slotChangeHandler}\n//                 >\n//                   <MenuItem value=\"None\">\n//                     <em>None</em>\n//                   </MenuItem>\n//                   {/* For Testing of Duplicate date-time booking */}\n//                   {/* <MenuItem value=\"05PM-06PM\">\n//                     <em>05PM-06PM</em>\n//                   </MenuItem> */}\n//                   {slotsAvailable.map((slot, key) => (\n//                     <MenuItem key={key} value={slot}>\n//                       {slot}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//                 <FormHelperText className={slotRequired}>\n//                   <span className=\"red\">Select a time slot</span>\n//                 </FormHelperText>\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Medical History\"\n//                   multiline\n//                   rows={4}\n//                   value={medicalHistory}\n//                   onChange={(e) => setMedicalHistory(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Symptoms\"\n//                   multiline\n//                   rows={4}\n//                   value={symptoms}\n//                   placeholder=\"ex.Cold, Swelling, etc\"\n//                   onChange={(e) => setSymptoms(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             {bookedSuccessfully === true && (\n//               <FormControl>\n//                 <span>Appointment booked successfully.</span>\n//               </FormControl>\n//             )}\n//             <br />\n//             <br />\n//             <Button\n//               id=\"bookappointment\"\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//             >\n//               Book Appointment\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Paper>{\" \"}\n//     </div>\n//   );\n// };\n// export default BookAppointment;\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Button, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { FormLabel } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useModalStyles = makeStyles(theme => ({\n  root: {\n    padding: \"15px 15px 30px 15px\",\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 200\n    },\n    \"& .MuiFormControl-root\": {\n      display: \"flex\",\n      marginBottom: \"15px\"\n    }\n  }\n}));\nconst selectStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    width: \"200px\"\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nconst doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\nconst getFormattedDate = date => {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n  return `${year}-${month}-${day}`;\n};\n\nconst BookAppointment = _ref => {\n  _s();\n\n  let {\n    doctor,\n    getUserAppointments,\n    userAppointments,\n    closeModalHandler\n  } = _ref;\n  const modalClasses = useModalStyles();\n  const [selectedDate, setSelectedDate] = React.useState(getFormattedDate(new Date()));\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [bookAppointmentForm, setBookAppointmentForm] = useState({\n    medicalHistory: \"\",\n    symptoms: \"\"\n  });\n  const selectClasses = selectStyles();\n\n  const fetchTimeSlotForAppointment = () => {\n    fetch(`http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`).then(response => response.json()).then(response => {\n      const time = response.timeSlot;\n      setTimeSlots([...time]);\n    });\n  };\n\n  useEffect(() => {\n    const err = document.getElementById(\"timeslot-error\");\n    err.style.display = \"none\";\n    const err2 = document.getElementById(\"not-loggedin-error\");\n    err2.classList.add(\"hide-message\");\n    err2.classList.remove(\"show-message\");\n    fetchTimeSlotForAppointment();\n  }, []);\n\n  const handleDateChange = date => {\n    setSelectedDate(getFormattedDate(date));\n    fetchTimeSlotForAppointment();\n  };\n\n  const handleTimeSlotChange = event => {\n    const err = document.getElementById(\"timeslot-error\");\n    err.style.display = \"none\";\n    setSelectedTimeSlot(event.target.value);\n  };\n\n  const handleInputChange = e => {\n    const state = bookAppointmentForm;\n    state[e.target.name] = e.target.value;\n    setBookAppointmentForm({ ...state\n    });\n  };\n\n  const isValidForm = () => {\n    let errorFound = false;\n\n    if (selectedTimeSlot === \"\") {\n      const err = document.getElementById(\"timeslot-error\");\n      err.style.display = \"block\";\n      errorFound = true;\n    }\n\n    if (loggedInUserId === \"\" || loggedInUserId === undefined) {\n      const err = document.getElementById(\"not-loggedin-error\");\n      err.classList.remove(\"hide-message\");\n      err.classList.add(\"show-message\");\n      errorFound = true;\n    }\n\n    return !errorFound;\n  };\n\n  const handleBookAppointment = async () => {\n    if (isValidForm()) {\n      const body = {\n        doctorId: doctor.id,\n        doctorName: doctorName,\n        userId: userDetails.id,\n        userName: `${userDetails.firstName} ${userDetails.lastName}`,\n        timeSlot: selectedTimeSlot,\n        createdDate: \"\",\n        appointmentDate: selectedDate,\n        symptoms: `${bookAppointmentForm.symptoms}`,\n        priorMedicalHistory: `${bookAppointmentForm.medicalHistory}`\n      };\n      const rawResponse = await fetch(\"http://localhost:8080/appointments\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (rawResponse.ok) {\n        alert(\"Appointment was booked successfully\");\n        closeModal();\n      } else {\n        alert(\"Either the slot is already booked or not available\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Book an Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      name: \"book-appointment-form\",\n      className: modalClasses.root,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        disabled: true,\n        id: \"doctorName\",\n        label: \"Doctor Name*\",\n        defaultValue: doctorName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n          disableToolbar: true,\n          variant: \"inline\",\n          format: \"MM/dd/yyyy\",\n          margin: \"normal\",\n          id: \"date-picker-inline\",\n          label: \"Date picker inline\",\n          value: selectedDate,\n          onChange: handleDateChange,\n          KeyboardButtonProps: {\n            \"aria-label\": \"change date\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: selectClasses.formControl,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          shrink: true,\n          id: \"select-speciality-input-label\",\n          children: \"Timeslot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"select-timeslot-label-label\",\n          id: \"select-timeslot-label\",\n          value: selectedTimeSlot,\n          onChange: handleTimeSlotChange,\n          displayEmpty: true,\n          className: selectClasses.selectEmpty,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"None\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), timeSlots.map(time => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: time,\n            children: time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          id: \"timeslot-error\",\n          children: \"Select a time slot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: selectClasses.formControl,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Medical History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"medical-history\",\n          name: \"medicalHistory\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: selectClasses.formControl,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Symptoms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"symptoms\",\n          name: \"symptoms\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleBookAppointment,\n        children: \"BOOK APPOINTMENT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        className: \"hide-message\",\n        id: \"not-loggedin-error\",\n        children: \"Please login to book an appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"x4KSaNaTN1N4QWhWy0UfmLPtsBg=\", false, function () {\n  return [useModalStyles];\n});\n\n_c = BookAppointment;\nexport default BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","Button","FormControl","FormHelperText","InputLabel","MenuItem","Select","TextField","makeStyles","DateFnsUtils","FormLabel","MuiPickersUtilsProvider","KeyboardDatePicker","Alert","useModalStyles","theme","root","padding","margin","spacing","width","display","marginBottom","selectStyles","formControl","minWidth","selectEmpty","marginTop","doctorName","doctor","firstName","lastName","getFormattedDate","date","day","getDate","month","getMonth","year","getFullYear","BookAppointment","getUserAppointments","userAppointments","closeModalHandler","modalClasses","selectedDate","setSelectedDate","Date","timeSlots","setTimeSlots","selectedTimeSlot","setSelectedTimeSlot","bookAppointmentForm","setBookAppointmentForm","medicalHistory","symptoms","selectClasses","fetchTimeSlotForAppointment","fetch","id","selectDate","then","response","json","time","timeSlot","err","document","getElementById","style","err2","classList","add","remove","handleDateChange","handleTimeSlotChange","event","target","value","handleInputChange","e","state","name","isValidForm","errorFound","loggedInUserId","undefined","handleBookAppointment","body","doctorId","userId","userDetails","userName","createdDate","appointmentDate","priorMedicalHistory","rawResponse","method","headers","Authorization","accessToken","JSON","stringify","ok","alert","closeModal","map"],"sources":["/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import {\n//   Paper,\n//   CardHeader,\n//   CardContent,\n//   TextField,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Button,\n//   FormHelperText,\n// } from \"@material-ui/core\";\n// import \"date-fns\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// // import { Book } from \"@material-ui/icons\";\n\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n//   const dateFormatter = (date) => {\n//     let dateArray = date.toLocaleDateString().split(\"/\");\n//     let newDate = `${dateArray[2]}-${dateArray[1]}-${dateArray[0]}`;\n//     console.log(newDate);\n//     return newDate;\n//   };\n\n//   const currentUserAppointments = userAppointments;\n//   const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n//   const [selectSlot, setSelectSlot] = useState(\"\");\n//   const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n//   const [medicalHistory, setMedicalHistory] = useState(\"\");\n//   const [symptoms, setSymptoms] = useState(\"\");\n//   const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n//   const [slotRequired, setSlotRequired] = useState(true);\n\n//   const dateChangeHandler = (date) => {\n//     setSelectDate(dateFormatter(date));\n//   };\n\n//   const slotChangeHandler = (event) => {\n//     setSelectSlot(event.target.value);\n//     //insert here\n//     setSlotRequired(false);\n//   };\n\n//   const getAvailableSlots = async () => {\n//     const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n//     try {\n//       const rawResponse = await fetch(url);\n//       if (rawResponse.ok) {\n//         const response = await rawResponse.json();\n//         setSlotsAvailable(response.timeSlot);\n//       } else {\n//         const error = new Error();\n//         error.message = \"Some error occured in fetching timeslots\";\n//         throw error;\n//       }\n//     } catch (error) {\n//       alert(error.message);\n//     }\n//   };\n\n//   const bookAppointmentHandler = async (e) => {\n//     if (e) e.preventDefault();\n\n//     if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n//       setSlotRequired(true);\n//       return;\n//     }\n\n//     const accessToken = sessionStorage.getItem(\"access-token\");\n//     const userDetails = sessionStorage.getItem(\"user-info\");\n//     // const emailId = sessionStorage.getItem(\"user-id\");\n//     // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n//     // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n\n//     if (accessToken === null || userDetails === null) {\n//       alert(\"Please Login to Book an appointment\");\n//       closeModalHandler();\n//       return;\n//     }\n\n//     // Check if user already has appointment for the same date-time\n//     const existingAppointment = currentUserAppointments.filter(\n//       (appointment) => {\n//         if (\n//           appointment.appointmentDate === selectDate &&\n//           appointment.timeSlot === selectSlot\n//         ) {\n//           return appointment;\n//         }\n//         return null;\n//       }\n//     );\n//     if (existingAppointment.length > 0) {\n//       alert(\"Either the slot is already booked or not available\");\n//       return;\n//     }\n\n//     const data = {\n//       doctorId: doctor.id,\n//       doctorName: doctorName,\n//       userId: userDetails.id,\n//       userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//       timeSlot: selectSlot,\n//       createdDate: dateFormatter(new Date()),\n//       appointmentDate: selectDate,\n//       symptoms: symptoms,\n//       priorMedicalHistory: medicalHistory,\n//     };\n\n//     const url = \"http://localhost:8080/appointments\";\n//     const appointmentRequest = {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json;charset=UTF-8\",\n//         Authorization: `Bearer ${accessToken}`,\n//       },\n//       body: JSON.stringify(data),\n//     };\n\n//     try {\n//       const rawResponse = await fetch(url, appointmentRequest);\n//       if (rawResponse.ok) {\n//         setBookedSuccessfully(true);\n//         getUserAppointments();\n//         setTimeout(function () {\n//           closeModalHandler();\n//         }, 1000);\n//       } else {\n//         if (rawResponse.status === 400) {\n//           alert(\"Bad Request\");\n//         }\n//       }\n//     } catch (error) {\n//       alert(e.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     getAvailableSlots();\n//   }, [selectDate]);\n\n//   return (\n//     <div>\n//       <Paper className=\"bookingModal\">\n//         <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n//         <CardContent key={doctor.id}>\n//           <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n//             <div>\n//               <TextField\n//                 disabled\n//                 id=\"standard-disabled\"\n//                 label=\"DoctorName\"\n//                 required\n//                 value={doctorName}\n//               />\n//             </div>\n//             <div>\n//               <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                 <KeyboardDatePicker\n//                   disableToolbar\n//                   variant=\"inline\"\n//                   format=\"MM/dd/yyyy\"\n//                   margin=\"normal\"\n//                   id=\"date-picker-inline\"\n//                   label=\"Date picker inline\"\n//                   value={selectDate}\n//                   onChange={dateChangeHandler}\n//                   KeyboardButtonProps={{\n//                     \"aria-label\": \"change date\",\n//                   }}\n//                 />\n//               </MuiPickersUtilsProvider>\n//             </div>\n//             <div>\n//               <FormControl>\n//                 <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n//                 <Select\n//                   labelId=\"timeSlotInput\"\n//                   id=\"timeSlotInput\"\n//                   value={selectSlot}\n//                   onChange={slotChangeHandler}\n//                 >\n//                   <MenuItem value=\"None\">\n//                     <em>None</em>\n//                   </MenuItem>\n//                   {/* For Testing of Duplicate date-time booking */}\n//                   {/* <MenuItem value=\"05PM-06PM\">\n//                     <em>05PM-06PM</em>\n//                   </MenuItem> */}\n//                   {slotsAvailable.map((slot, key) => (\n//                     <MenuItem key={key} value={slot}>\n//                       {slot}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//                 <FormHelperText className={slotRequired}>\n//                   <span className=\"red\">Select a time slot</span>\n//                 </FormHelperText>\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Medical History\"\n//                   multiline\n//                   rows={4}\n//                   value={medicalHistory}\n//                   onChange={(e) => setMedicalHistory(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             <div>\n//               <FormControl>\n//                 <TextField\n//                   id=\"standard-multiline-static\"\n//                   label=\"Symptoms\"\n//                   multiline\n//                   rows={4}\n//                   value={symptoms}\n//                   placeholder=\"ex.Cold, Swelling, etc\"\n//                   onChange={(e) => setSymptoms(e.target.value)}\n//                 />\n//               </FormControl>\n//             </div>\n//             <br />\n//             {bookedSuccessfully === true && (\n//               <FormControl>\n//                 <span>Appointment booked successfully.</span>\n//               </FormControl>\n//             )}\n//             <br />\n//             <br />\n//             <Button\n//               id=\"bookappointment\"\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//             >\n//               Book Appointment\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Paper>{\" \"}\n//     </div>\n//   );\n// };\n\n// export default BookAppointment;\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { FormLabel } from \"@material-ui/core\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useModalStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"15px 15px 30px 15px\",\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n    \"& .MuiFormControl-root\": {\n      display: \"flex\",\n      marginBottom: \"15px\",\n    },\n  },\n}));\n\nconst selectStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    width: \"200px\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\nconst doctorName = `${doctor.firstName} ${doctor.lastName}`;\nconst getFormattedDate = (date) => {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return `${year}-${month}-${day}`;\n};\n\nconst BookAppointment = ({\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler,\n}) => {\n  const modalClasses = useModalStyles();\n  const [selectedDate, setSelectedDate] = React.useState(\n    getFormattedDate(new Date())\n  );\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [bookAppointmentForm, setBookAppointmentForm] = useState({\n    medicalHistory: \"\",\n    symptoms: \"\",\n  });\n  const selectClasses = selectStyles();\n\n  const fetchTimeSlotForAppointment = () => {\n    fetch(\n      `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        const time = response.timeSlot;\n        setTimeSlots([...time]);\n      });\n  };\n\n  useEffect(() => {\n    const err = document.getElementById(\"timeslot-error\");\n    err.style.display = \"none\";\n    const err2 = document.getElementById(\"not-loggedin-error\");\n    err2.classList.add(\"hide-message\");\n    err2.classList.remove(\"show-message\");\n    fetchTimeSlotForAppointment();\n  }, []);\n\n  const handleDateChange = (date) => {\n    setSelectedDate(getFormattedDate(date));\n    fetchTimeSlotForAppointment();\n  };\n\n  const handleTimeSlotChange = (event) => {\n    const err = document.getElementById(\"timeslot-error\");\n    err.style.display = \"none\";\n    setSelectedTimeSlot(event.target.value);\n  };\n\n  const handleInputChange = (e) => {\n    const state = bookAppointmentForm;\n    state[e.target.name] = e.target.value;\n    setBookAppointmentForm({ ...state });\n  };\n\n  const isValidForm = () => {\n    let errorFound = false;\n    if (selectedTimeSlot === \"\") {\n      const err = document.getElementById(\"timeslot-error\");\n      err.style.display = \"block\";\n      errorFound = true;\n    }\n\n    if (loggedInUserId === \"\" || loggedInUserId === undefined) {\n      const err = document.getElementById(\"not-loggedin-error\");\n      err.classList.remove(\"hide-message\");\n      err.classList.add(\"show-message\");\n      errorFound = true;\n    }\n\n    return !errorFound;\n  };\n\n  const handleBookAppointment = async () => {\n    if (isValidForm()) {\n      const body = {\n        doctorId: doctor.id,\n        doctorName: doctorName,\n        userId: userDetails.id,\n        userName: `${userDetails.firstName} ${userDetails.lastName}`,\n        timeSlot: selectedTimeSlot,\n        createdDate: \"\",\n        appointmentDate: selectedDate,\n        symptoms: `${bookAppointmentForm.symptoms}`,\n        priorMedicalHistory: `${bookAppointmentForm.medicalHistory}`,\n      };\n      const rawResponse = await fetch(\"http://localhost:8080/appointments\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      });\n      if (rawResponse.ok) {\n        alert(\"Appointment was booked successfully\");\n        closeModal();\n      } else {\n        alert(\"Either the slot is already booked or not available\");\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"heading\">\n        <h2>Book an Appointment</h2>\n      </div>\n      <form name=\"book-appointment-form\" className={modalClasses.root}>\n        <TextField\n          disabled\n          id=\"doctorName\"\n          label=\"Doctor Name*\"\n          defaultValue={doctorName}\n        />\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            disableToolbar\n            variant=\"inline\"\n            format=\"MM/dd/yyyy\"\n            margin=\"normal\"\n            id=\"date-picker-inline\"\n            label=\"Date picker inline\"\n            value={selectedDate}\n            onChange={handleDateChange}\n            KeyboardButtonProps={{\n              \"aria-label\": \"change date\",\n            }}\n          />\n        </MuiPickersUtilsProvider>\n        <FormControl className={selectClasses.formControl}>\n          <InputLabel shrink id=\"select-speciality-input-label\">\n            Timeslot\n          </InputLabel>\n          <Select\n            labelId=\"select-timeslot-label-label\"\n            id=\"select-timeslot-label\"\n            value={selectedTimeSlot}\n            onChange={handleTimeSlotChange}\n            displayEmpty\n            className={selectClasses.selectEmpty}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            {timeSlots.map((time) => (\n              <MenuItem value={time}>{time}</MenuItem>\n            ))}\n          </Select>\n          <FormHelperText id=\"timeslot-error\">\n            Select a time slot\n          </FormHelperText>\n        </FormControl>\n        <FormControl className={selectClasses.formControl}>\n          <FormLabel>Medical History</FormLabel>\n          <TextField\n            id=\"medical-history\"\n            name=\"medicalHistory\"\n            onChange={handleInputChange}\n          />\n        </FormControl>\n        <FormControl className={selectClasses.formControl}>\n          <FormLabel>Symptoms</FormLabel>\n          <TextField\n            id=\"symptoms\"\n            name=\"symptoms\"\n            onChange={handleInputChange}\n          />\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleBookAppointment}\n        >\n          BOOK APPOINTMENT\n        </Button>\n        <Alert\n          severity=\"error\"\n          className=\"hide-message\"\n          id=\"not-loggedin-error\"\n        >\n          Please login to book an appointment\n        </Alert>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default BookAppointment;\n"],"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"},"metadata":{},"sourceType":"module"}