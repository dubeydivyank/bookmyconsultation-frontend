{"ast":null,"code":"var _jsxFileName = \"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Paper, CardHeader, CardContent, TextField, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\"; // import { Book } from \"@material-ui/icons\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookAppointment = _ref => {\n  _s();\n\n  let {\n    doctor,\n    getUserAppointments,\n    userAppointments,\n    closeModalHandler\n  } = _ref;\n  const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = date => {\n    // let dateArray = date.toLocaleDateString().split(\"/\");\n    // let newDate = `${dateArray[2]}-${dateArray[1]}-${dateArray[0]}`;\n    // console.log(newDate);\n    // return newDate;\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    console.log(`${year}-${month}-${day}`);\n    return `${year}-${month}-${day}`;\n  };\n\n  const currentUserAppointments = userAppointments;\n  const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n  const [selectSlot, setSelectSlot] = useState(\"\");\n  const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n  const [slotRequired, setSlotRequired] = useState(true);\n\n  const dateChangeHandler = date => {\n    setSelectDate(dateFormatter(date));\n  };\n\n  const slotChangeHandler = event => {\n    setSelectSlot(event.target.value); //insert here\n\n    setSlotRequired(false);\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n\n    try {\n      const rawResponse = await fetch(url);\n\n      if (rawResponse.ok) {\n        const response = await rawResponse.json();\n        setSlotsAvailable(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some error occured in fetching timeslots\";\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const bookAppointmentHandler = async e => {\n    if (e) e.preventDefault();\n\n    if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n      setSlotRequired(true);\n      return;\n    }\n\n    const accessToken = sessionStorage.getItem(\"access-token\");\n    const userDetails = sessionStorage.getItem(\"user-info\");\n    console.log(\"accessss\" + accessToken);\n    console.log(userDetails); // const emailId = sessionStorage.getItem(\"user-id\");\n    // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n\n    if (accessToken === null || userDetails === null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    } // Check if user already has appointment for the same date-time\n\n\n    const existingAppointment = currentUserAppointments.filter(appointment => {\n      if (appointment.appointmentDate === selectDate && appointment.timeSlot === selectSlot) {\n        return appointment;\n      }\n\n      return null;\n    });\n\n    if (existingAppointment.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    } //\n    //\n\n\n    const data = {\n      doctorId: `${doctor.id}`,\n      doctorName: `${doctorName}`,\n      userId: `${userDetails.id}`,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      userEmailId: `${userDetails.id}`,\n      timeSlot: `${selectSlot}`,\n      appointmentDate: `${selectDate}`,\n      createdDate: `${dateFormatter(new Date())}`,\n      symptoms: `${symptoms}`,\n      priorMedicalHistory: `${medicalHistory}`\n    };\n    const url = \"http://localhost:8080/appointments\";\n    const appointmentRequest = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(data)\n    };\n\n    try {\n      const rawResponse = await fetch(url, appointmentRequest);\n\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000);\n      } else {\n        if (rawResponse.status === 400) {\n          alert(\"Bad Request\");\n        }\n      }\n    } catch (error) {\n      alert(e.message);\n    }\n  };\n\n  useEffect(() => {\n    getAvailableSlots();\n  }, [selectDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: \"bookingModal\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        className: \"cardHeader\",\n        title: \"Book an Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: bookAppointmentHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              id: \"standard-disabled\",\n              label: \"DoctorName\",\n              required: true,\n              value: doctorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n              utils: DateFnsUtils,\n              children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                disableToolbar: true,\n                variant: \"inline\",\n                format: \"MM/dd/yyyy\",\n                margin: \"normal\",\n                id: \"date-picker-inline\",\n                label: \"Date picker inline\",\n                value: selectDate,\n                onChange: dateChangeHandler,\n                KeyboardButtonProps: {\n                  \"aria-label\": \"change date\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"timeSlotInput\",\n                children: \"Time Slot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"timeSlotInput\",\n                id: \"timeSlotInput\",\n                value: selectSlot,\n                onChange: slotChangeHandler,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"None\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 19\n                }, this), slotsAvailable.map((slot, key) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: slot,\n                  children: slot\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: slotRequired,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Select a time slot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Medical History\",\n                multiline: true,\n                rows: 4,\n                value: medicalHistory,\n                onChange: e => setMedicalHistory(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Symptoms\",\n                multiline: true,\n                rows: 4,\n                value: symptoms,\n                placeholder: \"ex.Cold, Swelling, etc\",\n                onChange: e => setSymptoms(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), bookedSuccessfully === true && /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Appointment booked successfully.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"bookappointment\",\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"A5gIOxBQlLAknZkyM5LiKmOCkFI=\");\n\n_c = BookAppointment;\nexport default BookAppointment; // import React, { Fragment, useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   TextField,\n// } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import { FormLabel } from \"@material-ui/core\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// import Alert from \"@material-ui/lab/Alert\";\n// const useModalStyles = makeStyles((theme) => ({\n//   root: {\n//     padding: \"15px 15px 30px 15px\",\n//     \"& .MuiTextField-root\": {\n//       margin: theme.spacing(1),\n//       width: 200,\n//     },\n//     \"& .MuiFormControl-root\": {\n//       display: \"flex\",\n//       marginBottom: \"15px\",\n//     },\n//   },\n// }));\n// const selectStyles = makeStyles((theme) => ({\n//   formControl: {\n//     margin: theme.spacing(1),\n//     minWidth: 120,\n//     width: \"200px\",\n//   },\n//   selectEmpty: {\n//     marginTop: theme.spacing(2),\n//   },\n// }));\n// const getFormattedDate = (date) => {\n//   const day = date.getDate();\n//   const month = date.getMonth() + 1;\n//   const year = date.getFullYear();\n//   return `${year}-${month}-${day}`;\n// };\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n//   const accessToken = sessionStorage.getItem(\"access-token\");\n//   const userDetails = sessionStorage.getItem(\"user-info\");\n//   const modalClasses = useModalStyles();\n//   const [selectedDate, setSelectedDate] = React.useState(\n//     getFormattedDate(new Date())\n//   );\n//   const [timeSlots, setTimeSlots] = useState([]);\n//   const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n//   const [bookAppointmentForm, setBookAppointmentForm] = useState({\n//     medicalHistory: \"\",\n//     symptoms: \"\",\n//   });\n//   const selectClasses = selectStyles();\n//   const fetchTimeSlotForAppointment = () => {\n//     fetch(\n//       `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectedDate}`\n//     )\n//       .then((response) => response.json())\n//       .then((response) => {\n//         const time = response.timeSlot;\n//         setTimeSlots([...time]);\n//       });\n//   };\n//   useEffect(() => {\n//     const err = document.getElementById(\"timeslot-error\");\n//     err.style.display = \"none\";\n//     const err2 = document.getElementById(\"not-loggedin-error\");\n//     err2.classList.add(\"hide-message\");\n//     err2.classList.remove(\"show-message\");\n//     fetchTimeSlotForAppointment();\n//   }, []);\n//   const handleDateChange = (date) => {\n//     setSelectedDate(getFormattedDate(date));\n//     fetchTimeSlotForAppointment();\n//   };\n//   const handleTimeSlotChange = (event) => {\n//     const err = document.getElementById(\"timeslot-error\");\n//     err.style.display = \"none\";\n//     setSelectedTimeSlot(event.target.value);\n//   };\n//   const handleInputChange = (e) => {\n//     const state = bookAppointmentForm;\n//     state[e.target.name] = e.target.value;\n//     setBookAppointmentForm({ ...state });\n//   };\n//   const isValidForm = () => {\n//     let errorFound = false;\n//     if (selectedTimeSlot === \"\") {\n//       const err = document.getElementById(\"timeslot-error\");\n//       err.style.display = \"block\";\n//       errorFound = true;\n//     }\n//     if (accessToken === null || userDetails === null) {\n//       const err = document.getElementById(\"not-loggedin-error\");\n//       err.classList.remove(\"hide-message\");\n//       err.classList.add(\"show-message\");\n//       errorFound = true;\n//     }\n//     return !errorFound;\n//   };\n//   const handleBookAppointment = async () => {\n//     if (isValidForm()) {\n//       const body = {\n//         doctorId: doctor.id,\n//         doctorName: doctorName,\n//         userId: userDetails.id,\n//         userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//         timeSlot: selectedTimeSlot,\n//         createdDate: \"\",\n//         appointmentDate: selectedDate,\n//         symptoms: `${bookAppointmentForm.symptoms}`,\n//         priorMedicalHistory: `${bookAppointmentForm.medicalHistory}`,\n//       };\n//       const rawResponse = await fetch(\"http://localhost:8080/appointments\", {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(body),\n//       });\n//       if (rawResponse.ok) {\n//         alert(\"Appointment was booked successfully\");\n//         closeModalHandler();\n//       } else {\n//         alert(\"Either the slot is already booked or not available\");\n//       }\n//     }\n//   };\n//   return (\n//     <Fragment>\n//       <div className=\"heading\">\n//         <h2>Book an Appointment</h2>\n//       </div>\n//       <form name=\"book-appointment-form\" className={modalClasses.root}>\n//         <TextField\n//           disabled\n//           id=\"doctorName\"\n//           label=\"Doctor Name*\"\n//           defaultValue={doctorName}\n//         />\n//         <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//           <KeyboardDatePicker\n//             disableToolbar\n//             variant=\"inline\"\n//             format=\"MM/dd/yyyy\"\n//             margin=\"normal\"\n//             id=\"date-picker-inline\"\n//             label=\"Date picker inline\"\n//             value={selectedDate}\n//             onChange={handleDateChange}\n//             KeyboardButtonProps={{\n//               \"aria-label\": \"change date\",\n//             }}\n//           />\n//         </MuiPickersUtilsProvider>\n//         <FormControl className={selectClasses.formControl}>\n//           <InputLabel shrink id=\"select-speciality-input-label\">\n//             Timeslot\n//           </InputLabel>\n//           <Select\n//             labelId=\"select-timeslot-label-label\"\n//             id=\"select-timeslot-label\"\n//             value={selectedTimeSlot}\n//             onChange={handleTimeSlotChange}\n//             displayEmpty\n//             className={selectClasses.selectEmpty}\n//           >\n//             <MenuItem value=\"\">\n//               <em>None</em>\n//             </MenuItem>\n//             {timeSlots.map((time) => (\n//               <MenuItem value={time}>{time}</MenuItem>\n//             ))}\n//           </Select>\n//           <FormHelperText id=\"timeslot-error\">\n//             Select a time slot\n//           </FormHelperText>\n//         </FormControl>\n//         <FormControl className={selectClasses.formControl}>\n//           <FormLabel>Medical History</FormLabel>\n//           <TextField\n//             id=\"medical-history\"\n//             name=\"medicalHistory\"\n//             onChange={handleInputChange}\n//           />\n//         </FormControl>\n//         <FormControl className={selectClasses.formControl}>\n//           <FormLabel>Symptoms</FormLabel>\n//           <TextField\n//             id=\"symptoms\"\n//             name=\"symptoms\"\n//             onChange={handleInputChange}\n//           />\n//         </FormControl>\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={handleBookAppointment}\n//         >\n//           BOOK APPOINTMENT\n//         </Button>\n//         <Alert\n//           severity=\"error\"\n//           className=\"hide-message\"\n//           id=\"not-loggedin-error\"\n//         >\n//           Please login to book an appointment\n//         </Alert>\n//       </form>\n//     </Fragment>\n//   );\n// };\n// export default BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","useState","useEffect","Paper","CardHeader","CardContent","TextField","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","BookAppointment","doctor","getUserAppointments","userAppointments","closeModalHandler","doctorName","firstName","lastName","dateFormatter","date","day","getDate","month","getMonth","year","getFullYear","console","log","currentUserAppointments","selectDate","setSelectDate","Date","selectSlot","setSelectSlot","slotsAvailable","setSlotsAvailable","medicalHistory","setMedicalHistory","symptoms","setSymptoms","bookedSuccessfully","setBookedSuccessfully","slotRequired","setSlotRequired","dateChangeHandler","slotChangeHandler","event","target","value","getAvailableSlots","url","id","rawResponse","fetch","ok","response","json","timeSlot","error","Error","message","alert","bookAppointmentHandler","e","preventDefault","accessToken","sessionStorage","getItem","userDetails","existingAppointment","filter","appointment","appointmentDate","length","data","doctorId","userId","userName","userEmailId","createdDate","priorMedicalHistory","appointmentRequest","method","headers","Accept","Authorization","body","JSON","stringify","setTimeout","status","map","slot","key"],"sources":["/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Paper,\n  CardHeader,\n  CardContent,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n// import { Book } from \"@material-ui/icons\";\n\nconst BookAppointment = ({\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler,\n}) => {\n  const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = (date) => {\n    // let dateArray = date.toLocaleDateString().split(\"/\");\n    // let newDate = `${dateArray[2]}-${dateArray[1]}-${dateArray[0]}`;\n    // console.log(newDate);\n    // return newDate;\n\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n\n    console.log(`${year}-${month}-${day}`);\n    return `${year}-${month}-${day}`;\n  };\n\n  const currentUserAppointments = userAppointments;\n  const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n  const [selectSlot, setSelectSlot] = useState(\"\");\n  const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n  const [slotRequired, setSlotRequired] = useState(true);\n\n  const dateChangeHandler = (date) => {\n    setSelectDate(dateFormatter(date));\n  };\n\n  const slotChangeHandler = (event) => {\n    setSelectSlot(event.target.value);\n    //insert here\n    setSlotRequired(false);\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectDate}`;\n    try {\n      const rawResponse = await fetch(url);\n      if (rawResponse.ok) {\n        const response = await rawResponse.json();\n        setSlotsAvailable(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some error occured in fetching timeslots\";\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const bookAppointmentHandler = async (e) => {\n    if (e) e.preventDefault();\n\n    if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n      setSlotRequired(true);\n      return;\n    }\n\n    const accessToken = sessionStorage.getItem(\"access-token\");\n    const userDetails = sessionStorage.getItem(\"user-info\");\n    console.log(\"accessss\" + accessToken);\n    console.log(userDetails);\n    // const emailId = sessionStorage.getItem(\"user-id\");\n    // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n\n    if (accessToken === null || userDetails === null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    }\n\n    // Check if user already has appointment for the same date-time\n    const existingAppointment = currentUserAppointments.filter(\n      (appointment) => {\n        if (\n          appointment.appointmentDate === selectDate &&\n          appointment.timeSlot === selectSlot\n        ) {\n          return appointment;\n        }\n        return null;\n      }\n    );\n    if (existingAppointment.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n    //\n\n    //\n    const data = {\n      doctorId: `${doctor.id}`,\n      doctorName: `${doctorName}`,\n      userId: `${userDetails.id}`,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      userEmailId: `${userDetails.id}`,\n      timeSlot: `${selectSlot}`,\n      appointmentDate: `${selectDate}`,\n      createdDate: `${dateFormatter(new Date())}`,\n      symptoms: `${symptoms}`,\n      priorMedicalHistory: `${medicalHistory}`,\n    };\n\n    const url = \"http://localhost:8080/appointments\";\n    const appointmentRequest = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify(data),\n    };\n\n    try {\n      const rawResponse = await fetch(url, appointmentRequest);\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000);\n      } else {\n        if (rawResponse.status === 400) {\n          alert(\"Bad Request\");\n        }\n      }\n    } catch (error) {\n      alert(e.message);\n    }\n  };\n\n  useEffect(() => {\n    getAvailableSlots();\n  }, [selectDate]);\n\n  return (\n    <div>\n      <Paper className=\"bookingModal\">\n        <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n        <CardContent key={doctor.id}>\n          <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n            <div>\n              <TextField\n                disabled\n                id=\"standard-disabled\"\n                label=\"DoctorName\"\n                required\n                value={doctorName}\n              />\n            </div>\n            <div>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"date-picker-inline\"\n                  label=\"Date picker inline\"\n                  value={selectDate}\n                  onChange={dateChangeHandler}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div>\n              <FormControl>\n                <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n                <Select\n                  labelId=\"timeSlotInput\"\n                  id=\"timeSlotInput\"\n                  value={selectSlot}\n                  onChange={slotChangeHandler}\n                >\n                  <MenuItem value=\"None\">\n                    <em>None</em>\n                  </MenuItem>\n                  {/* For Testing of Duplicate date-time booking */}\n                  {/* <MenuItem value=\"05PM-06PM\">\n                    <em>05PM-06PM</em>\n                  </MenuItem> */}\n                  {slotsAvailable.map((slot, key) => (\n                    <MenuItem key={key} value={slot}>\n                      {slot}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText className={slotRequired}>\n                  <span className=\"red\">Select a time slot</span>\n                </FormHelperText>\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Medical History\"\n                  multiline\n                  rows={4}\n                  value={medicalHistory}\n                  onChange={(e) => setMedicalHistory(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Symptoms\"\n                  multiline\n                  rows={4}\n                  value={symptoms}\n                  placeholder=\"ex.Cold, Swelling, etc\"\n                  onChange={(e) => setSymptoms(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            {bookedSuccessfully === true && (\n              <FormControl>\n                <span>Appointment booked successfully.</span>\n              </FormControl>\n            )}\n            <br />\n            <br />\n            <Button\n              id=\"bookappointment\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Book Appointment\n            </Button>\n          </form>\n        </CardContent>\n      </Paper>{\" \"}\n    </div>\n  );\n};\n\nexport default BookAppointment;\n// import React, { Fragment, useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   TextField,\n// } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import { FormLabel } from \"@material-ui/core\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// import Alert from \"@material-ui/lab/Alert\";\n\n// const useModalStyles = makeStyles((theme) => ({\n//   root: {\n//     padding: \"15px 15px 30px 15px\",\n//     \"& .MuiTextField-root\": {\n//       margin: theme.spacing(1),\n//       width: 200,\n//     },\n//     \"& .MuiFormControl-root\": {\n//       display: \"flex\",\n//       marginBottom: \"15px\",\n//     },\n//   },\n// }));\n\n// const selectStyles = makeStyles((theme) => ({\n//   formControl: {\n//     margin: theme.spacing(1),\n//     minWidth: 120,\n//     width: \"200px\",\n//   },\n//   selectEmpty: {\n//     marginTop: theme.spacing(2),\n//   },\n// }));\n\n// const getFormattedDate = (date) => {\n//   const day = date.getDate();\n//   const month = date.getMonth() + 1;\n//   const year = date.getFullYear();\n\n//   return `${year}-${month}-${day}`;\n// };\n\n// const BookAppointment = ({\n//   doctor,\n//   getUserAppointments,\n//   userAppointments,\n//   closeModalHandler,\n// }) => {\n//   const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n//   const accessToken = sessionStorage.getItem(\"access-token\");\n//   const userDetails = sessionStorage.getItem(\"user-info\");\n//   const modalClasses = useModalStyles();\n//   const [selectedDate, setSelectedDate] = React.useState(\n//     getFormattedDate(new Date())\n//   );\n//   const [timeSlots, setTimeSlots] = useState([]);\n//   const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n//   const [bookAppointmentForm, setBookAppointmentForm] = useState({\n//     medicalHistory: \"\",\n//     symptoms: \"\",\n//   });\n//   const selectClasses = selectStyles();\n\n//   const fetchTimeSlotForAppointment = () => {\n//     fetch(\n//       `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=${selectedDate}`\n//     )\n//       .then((response) => response.json())\n//       .then((response) => {\n//         const time = response.timeSlot;\n//         setTimeSlots([...time]);\n//       });\n//   };\n\n//   useEffect(() => {\n//     const err = document.getElementById(\"timeslot-error\");\n//     err.style.display = \"none\";\n//     const err2 = document.getElementById(\"not-loggedin-error\");\n//     err2.classList.add(\"hide-message\");\n//     err2.classList.remove(\"show-message\");\n//     fetchTimeSlotForAppointment();\n//   }, []);\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(getFormattedDate(date));\n//     fetchTimeSlotForAppointment();\n//   };\n\n//   const handleTimeSlotChange = (event) => {\n//     const err = document.getElementById(\"timeslot-error\");\n//     err.style.display = \"none\";\n//     setSelectedTimeSlot(event.target.value);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const state = bookAppointmentForm;\n//     state[e.target.name] = e.target.value;\n//     setBookAppointmentForm({ ...state });\n//   };\n\n//   const isValidForm = () => {\n//     let errorFound = false;\n//     if (selectedTimeSlot === \"\") {\n//       const err = document.getElementById(\"timeslot-error\");\n//       err.style.display = \"block\";\n//       errorFound = true;\n//     }\n\n//     if (accessToken === null || userDetails === null) {\n//       const err = document.getElementById(\"not-loggedin-error\");\n//       err.classList.remove(\"hide-message\");\n//       err.classList.add(\"show-message\");\n//       errorFound = true;\n//     }\n\n//     return !errorFound;\n//   };\n\n//   const handleBookAppointment = async () => {\n//     if (isValidForm()) {\n//       const body = {\n//         doctorId: doctor.id,\n//         doctorName: doctorName,\n//         userId: userDetails.id,\n//         userName: `${userDetails.firstName} ${userDetails.lastName}`,\n//         timeSlot: selectedTimeSlot,\n//         createdDate: \"\",\n//         appointmentDate: selectedDate,\n//         symptoms: `${bookAppointmentForm.symptoms}`,\n//         priorMedicalHistory: `${bookAppointmentForm.medicalHistory}`,\n//       };\n//       const rawResponse = await fetch(\"http://localhost:8080/appointments\", {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(body),\n//       });\n//       if (rawResponse.ok) {\n//         alert(\"Appointment was booked successfully\");\n//         closeModalHandler();\n//       } else {\n//         alert(\"Either the slot is already booked or not available\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <Fragment>\n//       <div className=\"heading\">\n//         <h2>Book an Appointment</h2>\n//       </div>\n//       <form name=\"book-appointment-form\" className={modalClasses.root}>\n//         <TextField\n//           disabled\n//           id=\"doctorName\"\n//           label=\"Doctor Name*\"\n//           defaultValue={doctorName}\n//         />\n\n//         <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//           <KeyboardDatePicker\n//             disableToolbar\n//             variant=\"inline\"\n//             format=\"MM/dd/yyyy\"\n//             margin=\"normal\"\n//             id=\"date-picker-inline\"\n//             label=\"Date picker inline\"\n//             value={selectedDate}\n//             onChange={handleDateChange}\n//             KeyboardButtonProps={{\n//               \"aria-label\": \"change date\",\n//             }}\n//           />\n//         </MuiPickersUtilsProvider>\n//         <FormControl className={selectClasses.formControl}>\n//           <InputLabel shrink id=\"select-speciality-input-label\">\n//             Timeslot\n//           </InputLabel>\n//           <Select\n//             labelId=\"select-timeslot-label-label\"\n//             id=\"select-timeslot-label\"\n//             value={selectedTimeSlot}\n//             onChange={handleTimeSlotChange}\n//             displayEmpty\n//             className={selectClasses.selectEmpty}\n//           >\n//             <MenuItem value=\"\">\n//               <em>None</em>\n//             </MenuItem>\n//             {timeSlots.map((time) => (\n//               <MenuItem value={time}>{time}</MenuItem>\n//             ))}\n//           </Select>\n//           <FormHelperText id=\"timeslot-error\">\n//             Select a time slot\n//           </FormHelperText>\n//         </FormControl>\n//         <FormControl className={selectClasses.formControl}>\n//           <FormLabel>Medical History</FormLabel>\n//           <TextField\n//             id=\"medical-history\"\n//             name=\"medicalHistory\"\n//             onChange={handleInputChange}\n//           />\n//         </FormControl>\n//         <FormControl className={selectClasses.formControl}>\n//           <FormLabel>Symptoms</FormLabel>\n//           <TextField\n//             id=\"symptoms\"\n//             name=\"symptoms\"\n//             onChange={handleInputChange}\n//           />\n//         </FormControl>\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={handleBookAppointment}\n//         >\n//           BOOK APPOINTMENT\n//         </Button>\n//         <Alert\n//           severity=\"error\"\n//           className=\"hide-message\"\n//           id=\"not-loggedin-error\"\n//         >\n//           Please login to book an appointment\n//         </Alert>\n//       </form>\n//     </Fragment>\n//   );\n// };\n\n// export default BookAppointment;\n"],"mappings":"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},"metadata":{},"sourceType":"module"}