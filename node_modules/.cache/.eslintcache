[{"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/index.js":"1","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/reportWebVitals.js":"2","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/Controller.js":"3","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/home/Home.js":"4","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/common/header/Header.js":"5","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/login/Login.js":"6","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/register/Register.js":"7","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/DoctorList.js":"8","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/appointment/Appointment.js":"9","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/DoctorDetails.js":"10","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js":"11","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/appointment/RateAppointment.js":"12"},{"size":478,"mtime":1628548460200,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1628548460151,"results":"15","hashOfConfig":"14"},{"size":462,"mtime":1652295320100,"results":"16","hashOfConfig":"14"},{"size":2396,"mtime":1652787351035,"results":"17","hashOfConfig":"14"},{"size":6388,"mtime":1652787373651,"results":"18","hashOfConfig":"14"},{"size":5399,"mtime":1652784911418,"results":"19","hashOfConfig":"14"},{"size":6182,"mtime":1652785022690,"results":"20","hashOfConfig":"14"},{"size":6049,"mtime":1652637160790,"results":"21","hashOfConfig":"14"},{"size":2909,"mtime":1652725873781,"results":"22","hashOfConfig":"14"},{"size":1230,"mtime":1652546991011,"results":"23","hashOfConfig":"14"},{"size":7973,"mtime":1652726389057,"results":"24","hashOfConfig":"14"},{"size":3569,"mtime":1652726090047,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1caampo",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/index.js",[],["52","53"],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/reportWebVitals.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/Controller.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/home/Home.js",["54"],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/common/header/Header.js",["55"],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/login/Login.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/register/Register.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/DoctorList.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/appointment/Appointment.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/DoctorDetails.js",[],"/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js",["56","57"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Paper,\n  CardHeader,\n  CardContent,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n// import { Book } from \"@material-ui/icons\";\n\nconst BookAppointment = ({\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler,\n}) => {\n  const doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = (date) => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n    // console.log(newDate);\n    return newDate;\n  };\n\n  const currentUserAppointments = userAppointments;\n  const [selectDate, setSelectDate] = useState(dateFormatter(new Date()));\n  const [selectSlot, setSelectSlot] = useState(\"\");\n  const [slotsAvailable, setSlotsAvailable] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n  const [slotRequired, setSlotRequired] = useState(\"None\");\n\n  const dateChangeHandler = (date) => {\n    setSelectDate(dateFormatter(date));\n  };\n\n  const slotChangeHandler = (event) => {\n    setSelectSlot(event.target.value);\n    //insert here\n    slotRequired(\"None\");\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `http://localhost:8080/doctors/${doctor.id}/timeSlots?date=?${selectDate}`;\n    try {\n      const rawResponse = await fetch(url);\n      if (rawResponse.ok) {\n        const response = await rawResponse.json();\n        setSlotsAvailable(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some error Occured in fetching timeslots\";\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const bookAppointmentHandler = async (e) => {\n    if (e) e.preventDefault();\n\n    if (selectSlot === null || selectSlot === \"\" || selectSlot === \"None\") {\n      setSlotRequired(\"Block\");\n      return;\n    }\n\n    const accessToken = sessionStorage.getItem(\"access-token\");\n    const userDetails = sessionStorage.getItem(\"user-info\");\n    // const emailId = sessionStorage.getItem(\"user-id\");\n    // const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    // const userDetails = JSON.parse(sessionStorage.getItem(\"user-info\"));\n\n    if (accessToken === null || userDetails === null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    }\n\n    // Check if user already has appointment for the same date-time\n    const existingAppointment = currentUserAppointments.filter(\n      (appointment) => {\n        if (\n          appointment.appointmentDate === selectDate &&\n          appointment.timeSlot === selectSlot\n        ) {\n          return appointment;\n        }\n        return null;\n      }\n    );\n    if (existingAppointment.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    const data = {\n      doctorId: doctor.id,\n      doctorName: doctorName,\n      userId: userDetails.id,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      timeSlot: selectSlot,\n      createdDate: dateFormatter(new Date()),\n      appointmentDate: selectDate,\n      symptoms: symptoms,\n      priorMedicalHistory: medicalHistory,\n    };\n\n    const url = \"http://localhost:8080/appointments\";\n    const appointmentRequest = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify(data),\n    };\n\n    try {\n      const rawResponse = await fetch(url, appointmentRequest);\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000);\n      } else {\n        if (rawResponse.status === 400) {\n          alert(\"Bad Request\");\n        }\n      }\n    } catch (error) {\n      alert(e.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   getAvailableSlots();\n  // }, [selectDate]);\n\n  return (\n    <div>\n      <Paper className=\"bookingModal\">\n        <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\n        <CardContent key={doctor.id}>\n          <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\n            <div>\n              <TextField\n                disabled\n                id=\"standard-disabled\"\n                label=\"DoctorName\"\n                required\n                value={doctorName}\n              />\n            </div>\n            <div>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"date-picker-inline\"\n                  label=\"Date picker inline\"\n                  value={selectDate}\n                  onChange={dateChangeHandler}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div>\n              <FormControl>\n                <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\n                <Select\n                  labelId=\"timeSlotInput\"\n                  id=\"timeSlotInput\"\n                  value={selectSlot}\n                  onChange={slotChangeHandler}\n                >\n                  <MenuItem value=\"None\">\n                    <em>None</em>\n                  </MenuItem>\n                  {/* For Testing of Duplicate date-time booking */}\n                  {/* <MenuItem value=\"05PM-06PM\">\n                    <em>05PM-06PM</em>\n                  </MenuItem> */}\n                  {slotsAvailable.map((slot, key) => (\n                    <MenuItem key={key} value={slot}>\n                      {slot}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText className={slotRequired}>\n                  <span className=\"red\">Select a time slot</span>\n                </FormHelperText>\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Medical History\"\n                  multiline\n                  rows={4}\n                  value={medicalHistory}\n                  onChange={(e) => setMedicalHistory(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            <div>\n              <FormControl>\n                <TextField\n                  id=\"standard-multiline-static\"\n                  label=\"Symptoms\"\n                  multiline\n                  rows={4}\n                  value={symptoms}\n                  placeholder=\"ex.Cold, Swelling, etc\"\n                  onChange={(e) => setSymptoms(e.target.value)}\n                />\n              </FormControl>\n            </div>\n            <br />\n            {bookedSuccessfully === true && (\n              <FormControl>\n                <span>Appointment booked successfully.</span>\n              </FormControl>\n            )}\n            <br />\n            <br />\n            <Button\n              id=\"bookappointment\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Book Appointment\n            </Button>\n          </form>\n        </CardContent>\n      </Paper>{\" \"}\n    </div>\n  );\n};\n\nexport default BookAppointment;\n","/Users/divyank/upGrad/Projects/CAPSTONE/Frontend/BookMyConsultationUI/src/screens/appointment/RateAppointment.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":57,"column":6,"nodeType":"64","endLine":57,"endColumn":22,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":162,"column":6,"nodeType":"64","endLine":162,"endColumn":8,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"72","line":56,"column":9,"nodeType":"70","messageId":"71","endLine":56,"endColumn":26},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserAppointments'. Either include it or remove the dependency array.","ArrayExpression",["75"],"React Hook useEffect has a missing dependency: 'setIsUserLoggedIn'. Either include it or remove the dependency array. If 'setIsUserLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getAvailableSlots' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [getUserAppointments, isUserLoggedIn]",{"range":"81","text":"82"},"Update the dependencies array to be: [setIsUserLoggedIn]",{"range":"83","text":"84"},[1661,1677],"[getUserAppointments, isUserLoggedIn]",[4754,4756],"[setIsUserLoggedIn]"]